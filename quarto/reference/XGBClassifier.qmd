# XGBClassifier { #xgboost.XGBClassifier }

`XGBClassifier(self, *, objective='binary:logistic', **kwargs)`



## Methods

| Name | Description |
| --- | --- |
| [predict_proba](#xgboost.XGBClassifier.predict_proba) | Predict the probability of each `X` example being of a given class. If the |

### predict_proba { #xgboost.XGBClassifier.predict_proba }

`XGBClassifier.predict_proba(X, validate_features=True, base_margin=None, iteration_range=None)`

Predict the probability of each `X` example being of a given class. If the
model is trained with early stopping, then :py:attr:`best_iteration` is used
automatically. The estimator uses `inplace_predict` by default and falls back to
using :py:class:`DMatrix` if devices between the data and the estimator don't
match.

.. note:: This function is only thread safe for `gbtree` and `dart`.

#### Parameters

| Name                | Type                       | Description                                                                                                                                                                                                                                                 | Default    |
|---------------------|----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `X`                 | ArrayLike                  | Feature matrix. See :ref:`py-data` for a list of supported types.                                                                                                                                                                                           | _required_ |
| `validate_features` | bool                       | When this is True, validate that the Booster's and data's feature_names are identical.  Otherwise, it is assumed that the feature_names are the same.                                                                                                       | `True`     |
| `base_margin`       | Optional\[ArrayLike\]      | Global bias for each instance. See :doc:`/tutorials/intercept` for details.                                                                                                                                                                                 | `None`     |
| `iteration_range`   | Optional\[IterationRange\] | Specifies which layer of trees are used in prediction.  For example, if a random forest is trained with 100 rounds.  Specifying `iteration_range=(10, 20)`, then only the forests built during [10, 20) (half open set) rounds are used in this prediction. | `None`     |

#### Returns

| Type       | Description                                                                                                                         |
|------------|-------------------------------------------------------------------------------------------------------------------------------------|
| np.ndarray | a numpy array of shape array-like of shape (n_samples, n_classes) with the probability of each data example being of a given class. |